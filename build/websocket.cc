//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "websocket.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
using namespace drogon;
std::string websocket::genText(const DrTemplateData& websocket_view_data)
{
	drogon::OStringStream websocket_tmp_stream;
	std::string layoutName{""};
	websocket_tmp_stream << "<!DOCTYPE html>\n";
	websocket_tmp_stream << "<html lang=\"en\">\n";
	websocket_tmp_stream << "<head>\n";
	websocket_tmp_stream << "    <meta charset=\"UTF-8\">\n";
	websocket_tmp_stream << "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n";
	websocket_tmp_stream << "    <title>WebSocket Test</title>\n";
	websocket_tmp_stream << "    <style>\n";
	websocket_tmp_stream << "        body {\n";
	websocket_tmp_stream << "            font-family: Arial, sans-serif;\n";
	websocket_tmp_stream << "            margin: 0;\n";
	websocket_tmp_stream << "            padding: 20px;\n";
	websocket_tmp_stream << "        }\n";
websocket_tmp_stream<<"\n";
	websocket_tmp_stream << "        #messages {\n";
	websocket_tmp_stream << "            width: 100%;\n";
	websocket_tmp_stream << "            height: 200px;\n";
	websocket_tmp_stream << "            overflow-y: scroll;\n";
	websocket_tmp_stream << "            border: 1px solid #ccc;\n";
	websocket_tmp_stream << "            padding: 10px;\n";
	websocket_tmp_stream << "        }\n";
websocket_tmp_stream<<"\n";
	websocket_tmp_stream << "        #input {\n";
	websocket_tmp_stream << "            width: 100%;\n";
	websocket_tmp_stream << "            padding: 10px;\n";
	websocket_tmp_stream << "            margin-top: 10px;\n";
	websocket_tmp_stream << "        }\n";
	websocket_tmp_stream << "    </style>\n";
	websocket_tmp_stream << "</head>\n";
	websocket_tmp_stream << "<body>\n";
	websocket_tmp_stream << "    <div id=\"messages\"></div>\n";
	websocket_tmp_stream << "    <input type=\"text\" id=\"input\" placeholder=\"Type your message here...\">\n";
	websocket_tmp_stream << "    \n";
	websocket_tmp_stream << "    <script>\n";
	websocket_tmp_stream << "        // 创建 WebSocket 连接\n";
	websocket_tmp_stream << "        const socket = new WebSocket(\"ws://192.168.205.134/websocket\"); // 你的 WebSocket 服务器地址\n";
websocket_tmp_stream<<"\n";
	websocket_tmp_stream << "        // 当连接打开时执行\n";
	websocket_tmp_stream << "        socket.onopen = function(event) {\n";
	websocket_tmp_stream << "            console.log(\"WebSocket opened\");\n";
	websocket_tmp_stream << "            alert(\"WebSocket opened\")\n";
	websocket_tmp_stream << "        };\n";
websocket_tmp_stream<<"\n";
	websocket_tmp_stream << "        // 当收到消息时执行\n";
	websocket_tmp_stream << "        socket.onmessage = function(event) {\n";
	websocket_tmp_stream << "            const messagesDiv = document.getElementById(\"messages\");\n";
	websocket_tmp_stream << "            const message = document.createElement(\"div\");\n";
	websocket_tmp_stream << "            message.textContent = event.data;\n";
	websocket_tmp_stream << "            messagesDiv.appendChild(message);\n";
	websocket_tmp_stream << "            messagesDiv.scrollTop = messagesDiv.scrollHeight;\n";
	websocket_tmp_stream << "        };\n";
websocket_tmp_stream<<"\n";
	websocket_tmp_stream << "        // 当连接关闭时执行\n";
	websocket_tmp_stream << "        socket.onclose = function(event) {\n";
	websocket_tmp_stream << "            console.log(\"WebSocket closed\");\n";
	websocket_tmp_stream << "        };\n";
websocket_tmp_stream<<"\n";
	websocket_tmp_stream << "        // 当发生错误时执行\n";
	websocket_tmp_stream << "        socket.onerror = function(event) {\n";
	websocket_tmp_stream << "            console.error(\"WebSocket error:\", event);\n";
	websocket_tmp_stream << "        };\n";
websocket_tmp_stream<<"\n";
	websocket_tmp_stream << "        // 发送消息\n";
	websocket_tmp_stream << "        document.getElementById(\"input\").addEventListener(\"keypress\", function(event) {\n";
	websocket_tmp_stream << "            if (event.key === \"Enter\") {\n";
	websocket_tmp_stream << "                const input = document.getElementById(\"input\");\n";
	websocket_tmp_stream << "                const message = input.value;\n";
	websocket_tmp_stream << "                socket.send(message);\n";
	websocket_tmp_stream << "                input.value = \"\";\n";
	websocket_tmp_stream << "            }\n";
	websocket_tmp_stream << "        });\n";
	websocket_tmp_stream << "    </script>\n";
	websocket_tmp_stream << "</body>\n";
	websocket_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(websocket_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = websocket_view_data;
auto str = std::move(websocket_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
