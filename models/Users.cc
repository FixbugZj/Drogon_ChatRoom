/**
 *
 *  Users.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Users.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::koi;

const std::string Users::Cols::_id = "id";
const std::string Users::Cols::_nickname = "nickname";
const std::string Users::Cols::_account = "account";
const std::string Users::Cols::_password = "password";
const std::string Users::Cols::_avatarUrl = "avatarUrl";
const std::string Users::Cols::_isValid = "isValid";
const std::string Users::Cols::_sex = "sex";
const std::string Users::Cols::_phone = "phone";
const std::string Users::Cols::_salt = "salt";
const std::string Users::Cols::_roleId = "roleId";
const std::string Users::Cols::_createTime = "createTime";
const std::string Users::Cols::_updateTime = "updateTime";
const std::string Users::Cols::_state = "state";
const std::string Users::primaryKeyName = "id";
const bool Users::hasPrimaryKey = true;
const std::string Users::tableName = "users";

const std::vector<typename Users::MetaData> Users::metaData_={
{"id","uint64_t","bigint unsigned",8,1,1,1},
{"nickname","std::string","varchar(255)",255,0,0,1},
{"account","std::string","varchar(255)",255,0,0,1},
{"password","std::string","varchar(255)",255,0,0,1},
{"avatarUrl","std::string","varchar(255)",255,0,0,0},
{"isValid","int8_t","tinyint(1)",1,0,0,0},
{"sex","std::string","varchar(2)",2,0,0,0},
{"phone","std::string","varchar(255)",255,0,0,0},
{"salt","std::string","varchar(255)",255,0,0,0},
{"roleId","std::string","text",0,0,0,0},
{"createTime","::trantor::Date","datetime",0,0,0,0},
{"updateTime","::trantor::Date","timestamp",0,0,0,0},
{"state","std::string","enum('online','offline')",0,0,0,0}
};
const std::string &Users::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Users::Users(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["nickname"].isNull())
        {
            nickname_=std::make_shared<std::string>(r["nickname"].as<std::string>());
        }
        if(!r["account"].isNull())
        {
            account_=std::make_shared<std::string>(r["account"].as<std::string>());
        }
        if(!r["password"].isNull())
        {
            password_=std::make_shared<std::string>(r["password"].as<std::string>());
        }
        if(!r["avatarUrl"].isNull())
        {
            avatarurl_=std::make_shared<std::string>(r["avatarUrl"].as<std::string>());
        }
        if(!r["isValid"].isNull())
        {
            isvalid_=std::make_shared<int8_t>(r["isValid"].as<int8_t>());
        }
        if(!r["sex"].isNull())
        {
            sex_=std::make_shared<std::string>(r["sex"].as<std::string>());
        }
        if(!r["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(r["phone"].as<std::string>());
        }
        if(!r["salt"].isNull())
        {
            salt_=std::make_shared<std::string>(r["salt"].as<std::string>());
        }
        if(!r["roleId"].isNull())
        {
            roleid_=std::make_shared<std::string>(r["roleId"].as<std::string>());
        }
        if(!r["createTime"].isNull())
        {
            auto timeStr = r["createTime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updateTime"].isNull())
        {
            auto timeStr = r["updateTime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["state"].isNull())
        {
            state_=std::make_shared<std::string>(r["state"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 13 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            nickname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            account_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            password_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            avatarurl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            isvalid_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            sex_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            phone_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            salt_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            roleid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            state_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Users::Users(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            nickname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            account_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            avatarurl_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            isvalid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            sex_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            salt_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            roleid_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            state_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
}

Users::Users(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("nickname"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["nickname"].isNull())
        {
            nickname_=std::make_shared<std::string>(pJson["nickname"].asString());
        }
    }
    if(pJson.isMember("account"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["account"].isNull())
        {
            account_=std::make_shared<std::string>(pJson["account"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("avatarUrl"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["avatarUrl"].isNull())
        {
            avatarurl_=std::make_shared<std::string>(pJson["avatarUrl"].asString());
        }
    }
    if(pJson.isMember("isValid"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["isValid"].isNull())
        {
            isvalid_=std::make_shared<int8_t>((int8_t)pJson["isValid"].asInt64());
        }
    }
    if(pJson.isMember("sex"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["sex"].isNull())
        {
            sex_=std::make_shared<std::string>(pJson["sex"].asString());
        }
    }
    if(pJson.isMember("phone"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
    if(pJson.isMember("salt"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["salt"].isNull())
        {
            salt_=std::make_shared<std::string>(pJson["salt"].asString());
        }
    }
    if(pJson.isMember("roleId"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["roleId"].isNull())
        {
            roleid_=std::make_shared<std::string>(pJson["roleId"].asString());
        }
    }
    if(pJson.isMember("createTime"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["createTime"].isNull())
        {
            auto timeStr = pJson["createTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateTime"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["updateTime"].isNull())
        {
            auto timeStr = pJson["updateTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("state"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["state"].isNull())
        {
            state_=std::make_shared<std::string>(pJson["state"].asString());
        }
    }
}

void Users::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 13)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            nickname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            account_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            avatarurl_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            isvalid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            sex_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            phone_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            salt_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            roleid_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            state_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
}

void Users::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("nickname"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["nickname"].isNull())
        {
            nickname_=std::make_shared<std::string>(pJson["nickname"].asString());
        }
    }
    if(pJson.isMember("account"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["account"].isNull())
        {
            account_=std::make_shared<std::string>(pJson["account"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("avatarUrl"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["avatarUrl"].isNull())
        {
            avatarurl_=std::make_shared<std::string>(pJson["avatarUrl"].asString());
        }
    }
    if(pJson.isMember("isValid"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["isValid"].isNull())
        {
            isvalid_=std::make_shared<int8_t>((int8_t)pJson["isValid"].asInt64());
        }
    }
    if(pJson.isMember("sex"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["sex"].isNull())
        {
            sex_=std::make_shared<std::string>(pJson["sex"].asString());
        }
    }
    if(pJson.isMember("phone"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["phone"].isNull())
        {
            phone_=std::make_shared<std::string>(pJson["phone"].asString());
        }
    }
    if(pJson.isMember("salt"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["salt"].isNull())
        {
            salt_=std::make_shared<std::string>(pJson["salt"].asString());
        }
    }
    if(pJson.isMember("roleId"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["roleId"].isNull())
        {
            roleid_=std::make_shared<std::string>(pJson["roleId"].asString());
        }
    }
    if(pJson.isMember("createTime"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["createTime"].isNull())
        {
            auto timeStr = pJson["createTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateTime"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["updateTime"].isNull())
        {
            auto timeStr = pJson["updateTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("state"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["state"].isNull())
        {
            state_=std::make_shared<std::string>(pJson["state"].asString());
        }
    }
}

const uint64_t &Users::getValueOfId() const noexcept
{
    static const uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Users::getId() const noexcept
{
    return id_;
}
void Users::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Users::PrimaryKeyType & Users::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Users::getValueOfNickname() const noexcept
{
    static const std::string defaultValue = std::string();
    if(nickname_)
        return *nickname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getNickname() const noexcept
{
    return nickname_;
}
void Users::setNickname(const std::string &pNickname) noexcept
{
    nickname_ = std::make_shared<std::string>(pNickname);
    dirtyFlag_[1] = true;
}
void Users::setNickname(std::string &&pNickname) noexcept
{
    nickname_ = std::make_shared<std::string>(std::move(pNickname));
    dirtyFlag_[1] = true;
}

const std::string &Users::getValueOfAccount() const noexcept
{
    static const std::string defaultValue = std::string();
    if(account_)
        return *account_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getAccount() const noexcept
{
    return account_;
}
void Users::setAccount(const std::string &pAccount) noexcept
{
    account_ = std::make_shared<std::string>(pAccount);
    dirtyFlag_[2] = true;
}
void Users::setAccount(std::string &&pAccount) noexcept
{
    account_ = std::make_shared<std::string>(std::move(pAccount));
    dirtyFlag_[2] = true;
}

const std::string &Users::getValueOfPassword() const noexcept
{
    static const std::string defaultValue = std::string();
    if(password_)
        return *password_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getPassword() const noexcept
{
    return password_;
}
void Users::setPassword(const std::string &pPassword) noexcept
{
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[3] = true;
}
void Users::setPassword(std::string &&pPassword) noexcept
{
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[3] = true;
}

const std::string &Users::getValueOfAvatarurl() const noexcept
{
    static const std::string defaultValue = std::string();
    if(avatarurl_)
        return *avatarurl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getAvatarurl() const noexcept
{
    return avatarurl_;
}
void Users::setAvatarurl(const std::string &pAvatarurl) noexcept
{
    avatarurl_ = std::make_shared<std::string>(pAvatarurl);
    dirtyFlag_[4] = true;
}
void Users::setAvatarurl(std::string &&pAvatarurl) noexcept
{
    avatarurl_ = std::make_shared<std::string>(std::move(pAvatarurl));
    dirtyFlag_[4] = true;
}
void Users::setAvatarurlToNull() noexcept
{
    avatarurl_.reset();
    dirtyFlag_[4] = true;
}

const int8_t &Users::getValueOfIsvalid() const noexcept
{
    static const int8_t defaultValue = int8_t();
    if(isvalid_)
        return *isvalid_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Users::getIsvalid() const noexcept
{
    return isvalid_;
}
void Users::setIsvalid(const int8_t &pIsvalid) noexcept
{
    isvalid_ = std::make_shared<int8_t>(pIsvalid);
    dirtyFlag_[5] = true;
}
void Users::setIsvalidToNull() noexcept
{
    isvalid_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Users::getValueOfSex() const noexcept
{
    static const std::string defaultValue = std::string();
    if(sex_)
        return *sex_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getSex() const noexcept
{
    return sex_;
}
void Users::setSex(const std::string &pSex) noexcept
{
    sex_ = std::make_shared<std::string>(pSex);
    dirtyFlag_[6] = true;
}
void Users::setSex(std::string &&pSex) noexcept
{
    sex_ = std::make_shared<std::string>(std::move(pSex));
    dirtyFlag_[6] = true;
}
void Users::setSexToNull() noexcept
{
    sex_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Users::getValueOfPhone() const noexcept
{
    static const std::string defaultValue = std::string();
    if(phone_)
        return *phone_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getPhone() const noexcept
{
    return phone_;
}
void Users::setPhone(const std::string &pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(pPhone);
    dirtyFlag_[7] = true;
}
void Users::setPhone(std::string &&pPhone) noexcept
{
    phone_ = std::make_shared<std::string>(std::move(pPhone));
    dirtyFlag_[7] = true;
}
void Users::setPhoneToNull() noexcept
{
    phone_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Users::getValueOfSalt() const noexcept
{
    static const std::string defaultValue = std::string();
    if(salt_)
        return *salt_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getSalt() const noexcept
{
    return salt_;
}
void Users::setSalt(const std::string &pSalt) noexcept
{
    salt_ = std::make_shared<std::string>(pSalt);
    dirtyFlag_[8] = true;
}
void Users::setSalt(std::string &&pSalt) noexcept
{
    salt_ = std::make_shared<std::string>(std::move(pSalt));
    dirtyFlag_[8] = true;
}
void Users::setSaltToNull() noexcept
{
    salt_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Users::getValueOfRoleid() const noexcept
{
    static const std::string defaultValue = std::string();
    if(roleid_)
        return *roleid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getRoleid() const noexcept
{
    return roleid_;
}
void Users::setRoleid(const std::string &pRoleid) noexcept
{
    roleid_ = std::make_shared<std::string>(pRoleid);
    dirtyFlag_[9] = true;
}
void Users::setRoleid(std::string &&pRoleid) noexcept
{
    roleid_ = std::make_shared<std::string>(std::move(pRoleid));
    dirtyFlag_[9] = true;
}
void Users::setRoleidToNull() noexcept
{
    roleid_.reset();
    dirtyFlag_[9] = true;
}

const ::trantor::Date &Users::getValueOfCreatetime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createtime_)
        return *createtime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getCreatetime() const noexcept
{
    return createtime_;
}
void Users::setCreatetime(const ::trantor::Date &pCreatetime) noexcept
{
    createtime_ = std::make_shared<::trantor::Date>(pCreatetime);
    dirtyFlag_[10] = true;
}
void Users::setCreatetimeToNull() noexcept
{
    createtime_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &Users::getValueOfUpdatetime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatetime_)
        return *updatetime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getUpdatetime() const noexcept
{
    return updatetime_;
}
void Users::setUpdatetime(const ::trantor::Date &pUpdatetime) noexcept
{
    updatetime_ = std::make_shared<::trantor::Date>(pUpdatetime);
    dirtyFlag_[11] = true;
}
void Users::setUpdatetimeToNull() noexcept
{
    updatetime_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Users::getValueOfState() const noexcept
{
    static const std::string defaultValue = std::string();
    if(state_)
        return *state_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getState() const noexcept
{
    return state_;
}
void Users::setState(const std::string &pState) noexcept
{
    state_ = std::make_shared<std::string>(pState);
    dirtyFlag_[12] = true;
}
void Users::setState(std::string &&pState) noexcept
{
    state_ = std::make_shared<std::string>(std::move(pState));
    dirtyFlag_[12] = true;
}
void Users::setStateToNull() noexcept
{
    state_.reset();
    dirtyFlag_[12] = true;
}

void Users::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Users::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "nickname",
        "account",
        "password",
        "avatarUrl",
        "isValid",
        "sex",
        "phone",
        "salt",
        "roleId",
        "createTime",
        "updateTime",
        "state"
    };
    return inCols;
}

void Users::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getNickname())
        {
            binder << getValueOfNickname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAccount())
        {
            binder << getValueOfAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAvatarurl())
        {
            binder << getValueOfAvatarurl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIsvalid())
        {
            binder << getValueOfIsvalid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSalt())
        {
            binder << getValueOfSalt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRoleid())
        {
            binder << getValueOfRoleid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatetime())
        {
            binder << getValueOfCreatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatetime())
        {
            binder << getValueOfUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Users::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    return ret;
}

void Users::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getNickname())
        {
            binder << getValueOfNickname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAccount())
        {
            binder << getValueOfAccount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAvatarurl())
        {
            binder << getValueOfAvatarurl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getIsvalid())
        {
            binder << getValueOfIsvalid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPhone())
        {
            binder << getValueOfPhone();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSalt())
        {
            binder << getValueOfSalt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRoleid())
        {
            binder << getValueOfRoleid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatetime())
        {
            binder << getValueOfCreatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatetime())
        {
            binder << getValueOfUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Users::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getNickname())
    {
        ret["nickname"]=getValueOfNickname();
    }
    else
    {
        ret["nickname"]=Json::Value();
    }
    if(getAccount())
    {
        ret["account"]=getValueOfAccount();
    }
    else
    {
        ret["account"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getAvatarurl())
    {
        ret["avatarUrl"]=getValueOfAvatarurl();
    }
    else
    {
        ret["avatarUrl"]=Json::Value();
    }
    if(getIsvalid())
    {
        ret["isValid"]=getValueOfIsvalid();
    }
    else
    {
        ret["isValid"]=Json::Value();
    }
    if(getSex())
    {
        ret["sex"]=getValueOfSex();
    }
    else
    {
        ret["sex"]=Json::Value();
    }
    if(getPhone())
    {
        ret["phone"]=getValueOfPhone();
    }
    else
    {
        ret["phone"]=Json::Value();
    }
    if(getSalt())
    {
        ret["salt"]=getValueOfSalt();
    }
    else
    {
        ret["salt"]=Json::Value();
    }
    if(getRoleid())
    {
        ret["roleId"]=getValueOfRoleid();
    }
    else
    {
        ret["roleId"]=Json::Value();
    }
    if(getCreatetime())
    {
        ret["createTime"]=getCreatetime()->toDbStringLocal();
    }
    else
    {
        ret["createTime"]=Json::Value();
    }
    if(getUpdatetime())
    {
        ret["updateTime"]=getUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["updateTime"]=Json::Value();
    }
    if(getState())
    {
        ret["state"]=getValueOfState();
    }
    else
    {
        ret["state"]=Json::Value();
    }
    return ret;
}

Json::Value Users::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 13)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getNickname())
            {
                ret[pMasqueradingVector[1]]=getValueOfNickname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAccount())
            {
                ret[pMasqueradingVector[2]]=getValueOfAccount();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPassword())
            {
                ret[pMasqueradingVector[3]]=getValueOfPassword();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getAvatarurl())
            {
                ret[pMasqueradingVector[4]]=getValueOfAvatarurl();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getIsvalid())
            {
                ret[pMasqueradingVector[5]]=getValueOfIsvalid();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getSex())
            {
                ret[pMasqueradingVector[6]]=getValueOfSex();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPhone())
            {
                ret[pMasqueradingVector[7]]=getValueOfPhone();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getSalt())
            {
                ret[pMasqueradingVector[8]]=getValueOfSalt();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getRoleid())
            {
                ret[pMasqueradingVector[9]]=getValueOfRoleid();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCreatetime())
            {
                ret[pMasqueradingVector[10]]=getCreatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getUpdatetime())
            {
                ret[pMasqueradingVector[11]]=getUpdatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getState())
            {
                ret[pMasqueradingVector[12]]=getValueOfState();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getNickname())
    {
        ret["nickname"]=getValueOfNickname();
    }
    else
    {
        ret["nickname"]=Json::Value();
    }
    if(getAccount())
    {
        ret["account"]=getValueOfAccount();
    }
    else
    {
        ret["account"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getAvatarurl())
    {
        ret["avatarUrl"]=getValueOfAvatarurl();
    }
    else
    {
        ret["avatarUrl"]=Json::Value();
    }
    if(getIsvalid())
    {
        ret["isValid"]=getValueOfIsvalid();
    }
    else
    {
        ret["isValid"]=Json::Value();
    }
    if(getSex())
    {
        ret["sex"]=getValueOfSex();
    }
    else
    {
        ret["sex"]=Json::Value();
    }
    if(getPhone())
    {
        ret["phone"]=getValueOfPhone();
    }
    else
    {
        ret["phone"]=Json::Value();
    }
    if(getSalt())
    {
        ret["salt"]=getValueOfSalt();
    }
    else
    {
        ret["salt"]=Json::Value();
    }
    if(getRoleid())
    {
        ret["roleId"]=getValueOfRoleid();
    }
    else
    {
        ret["roleId"]=Json::Value();
    }
    if(getCreatetime())
    {
        ret["createTime"]=getCreatetime()->toDbStringLocal();
    }
    else
    {
        ret["createTime"]=Json::Value();
    }
    if(getUpdatetime())
    {
        ret["updateTime"]=getUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["updateTime"]=Json::Value();
    }
    if(getState())
    {
        ret["state"]=getValueOfState();
    }
    else
    {
        ret["state"]=Json::Value();
    }
    return ret;
}

bool Users::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("nickname"))
    {
        if(!validJsonOfField(1, "nickname", pJson["nickname"], err, true))
            return false;
    }
    else
    {
        err="The nickname column cannot be null";
        return false;
    }
    if(pJson.isMember("account"))
    {
        if(!validJsonOfField(2, "account", pJson["account"], err, true))
            return false;
    }
    else
    {
        err="The account column cannot be null";
        return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(3, "password", pJson["password"], err, true))
            return false;
    }
    else
    {
        err="The password column cannot be null";
        return false;
    }
    if(pJson.isMember("avatarUrl"))
    {
        if(!validJsonOfField(4, "avatarUrl", pJson["avatarUrl"], err, true))
            return false;
    }
    if(pJson.isMember("isValid"))
    {
        if(!validJsonOfField(5, "isValid", pJson["isValid"], err, true))
            return false;
    }
    if(pJson.isMember("sex"))
    {
        if(!validJsonOfField(6, "sex", pJson["sex"], err, true))
            return false;
    }
    if(pJson.isMember("phone"))
    {
        if(!validJsonOfField(7, "phone", pJson["phone"], err, true))
            return false;
    }
    if(pJson.isMember("salt"))
    {
        if(!validJsonOfField(8, "salt", pJson["salt"], err, true))
            return false;
    }
    if(pJson.isMember("roleId"))
    {
        if(!validJsonOfField(9, "roleId", pJson["roleId"], err, true))
            return false;
    }
    if(pJson.isMember("createTime"))
    {
        if(!validJsonOfField(10, "createTime", pJson["createTime"], err, true))
            return false;
    }
    if(pJson.isMember("updateTime"))
    {
        if(!validJsonOfField(11, "updateTime", pJson["updateTime"], err, true))
            return false;
    }
    if(pJson.isMember("state"))
    {
        if(!validJsonOfField(12, "state", pJson["state"], err, true))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("nickname"))
    {
        if(!validJsonOfField(1, "nickname", pJson["nickname"], err, false))
            return false;
    }
    if(pJson.isMember("account"))
    {
        if(!validJsonOfField(2, "account", pJson["account"], err, false))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(3, "password", pJson["password"], err, false))
            return false;
    }
    if(pJson.isMember("avatarUrl"))
    {
        if(!validJsonOfField(4, "avatarUrl", pJson["avatarUrl"], err, false))
            return false;
    }
    if(pJson.isMember("isValid"))
    {
        if(!validJsonOfField(5, "isValid", pJson["isValid"], err, false))
            return false;
    }
    if(pJson.isMember("sex"))
    {
        if(!validJsonOfField(6, "sex", pJson["sex"], err, false))
            return false;
    }
    if(pJson.isMember("phone"))
    {
        if(!validJsonOfField(7, "phone", pJson["phone"], err, false))
            return false;
    }
    if(pJson.isMember("salt"))
    {
        if(!validJsonOfField(8, "salt", pJson["salt"], err, false))
            return false;
    }
    if(pJson.isMember("roleId"))
    {
        if(!validJsonOfField(9, "roleId", pJson["roleId"], err, false))
            return false;
    }
    if(pJson.isMember("createTime"))
    {
        if(!validJsonOfField(10, "createTime", pJson["createTime"], err, false))
            return false;
    }
    if(pJson.isMember("updateTime"))
    {
        if(!validJsonOfField(11, "updateTime", pJson["updateTime"], err, false))
            return false;
    }
    if(pJson.isMember("state"))
    {
        if(!validJsonOfField(12, "state", pJson["state"], err, false))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 13)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
