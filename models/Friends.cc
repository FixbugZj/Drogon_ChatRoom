/**
 *
 *  Friends.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Friends.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::db;

const std::string Friends::Cols::_userid = "userid";
const std::string Friends::Cols::_friendid = "friendid";
const std::vector<std::string> Friends::primaryKeyName = {"userid","friendid"};
const bool Friends::hasPrimaryKey = true;
const std::string Friends::tableName = "friends";

const std::vector<typename Friends::MetaData> Friends::metaData_={
{"userid","int32_t","int",4,0,1,1},
{"friendid","int32_t","int",4,0,1,1}
};
const std::string &Friends::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Friends::Friends(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["userid"].isNull())
        {
            userid_=std::make_shared<int32_t>(r["userid"].as<int32_t>());
        }
        if(!r["friendid"].isNull())
        {
            friendid_=std::make_shared<int32_t>(r["friendid"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            friendid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Friends::Friends(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            friendid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

Friends::Friends(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("userid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["userid"].isNull())
        {
            userid_=std::make_shared<int32_t>((int32_t)pJson["userid"].asInt64());
        }
    }
    if(pJson.isMember("friendid"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["friendid"].isNull())
        {
            friendid_=std::make_shared<int32_t>((int32_t)pJson["friendid"].asInt64());
        }
    }
}

void Friends::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            friendid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
}

void Friends::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("userid"))
    {
        if(!pJson["userid"].isNull())
        {
            userid_=std::make_shared<int32_t>((int32_t)pJson["userid"].asInt64());
        }
    }
    if(pJson.isMember("friendid"))
    {
        if(!pJson["friendid"].isNull())
        {
            friendid_=std::make_shared<int32_t>((int32_t)pJson["friendid"].asInt64());
        }
    }
}

const int32_t &Friends::getValueOfUserid() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(userid_)
        return *userid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Friends::getUserid() const noexcept
{
    return userid_;
}
void Friends::setUserid(const int32_t &pUserid) noexcept
{
    userid_ = std::make_shared<int32_t>(pUserid);
    dirtyFlag_[0] = true;
}

const int32_t &Friends::getValueOfFriendid() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(friendid_)
        return *friendid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Friends::getFriendid() const noexcept
{
    return friendid_;
}
void Friends::setFriendid(const int32_t &pFriendid) noexcept
{
    friendid_ = std::make_shared<int32_t>(pFriendid);
    dirtyFlag_[1] = true;
}

void Friends::updateId(const uint64_t id)
{
}
typename Friends::PrimaryKeyType Friends::getPrimaryKey() const
{
    return std::make_tuple(*userid_,*friendid_);
}

const std::vector<std::string> &Friends::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "userid",
        "friendid"
    };
    return inCols;
}

void Friends::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFriendid())
        {
            binder << getValueOfFriendid();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Friends::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Friends::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserid())
        {
            binder << getValueOfUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFriendid())
        {
            binder << getValueOfFriendid();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Friends::toJson() const
{
    Json::Value ret;
    if(getUserid())
    {
        ret["userid"]=getValueOfUserid();
    }
    else
    {
        ret["userid"]=Json::Value();
    }
    if(getFriendid())
    {
        ret["friendid"]=getValueOfFriendid();
    }
    else
    {
        ret["friendid"]=Json::Value();
    }
    return ret;
}

Json::Value Friends::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserid())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFriendid())
            {
                ret[pMasqueradingVector[1]]=getValueOfFriendid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserid())
    {
        ret["userid"]=getValueOfUserid();
    }
    else
    {
        ret["userid"]=Json::Value();
    }
    if(getFriendid())
    {
        ret["friendid"]=getValueOfFriendid();
    }
    else
    {
        ret["friendid"]=Json::Value();
    }
    return ret;
}

bool Friends::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("userid"))
    {
        if(!validJsonOfField(0, "userid", pJson["userid"], err, true))
            return false;
    }
    else
    {
        err="The userid column cannot be null";
        return false;
    }
    if(pJson.isMember("friendid"))
    {
        if(!validJsonOfField(1, "friendid", pJson["friendid"], err, true))
            return false;
    }
    else
    {
        err="The friendid column cannot be null";
        return false;
    }
    return true;
}
bool Friends::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Friends::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("userid"))
    {
        if(!validJsonOfField(0, "userid", pJson["userid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("friendid"))
    {
        if(!validJsonOfField(1, "friendid", pJson["friendid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool Friends::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Friends::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
