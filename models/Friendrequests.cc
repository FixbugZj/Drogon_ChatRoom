/**
 *
 *  Friendrequests.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Friendrequests.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::koi;

const std::string Friendrequests::Cols::_id = "id";
const std::string Friendrequests::Cols::_from_user = "from_user";
const std::string Friendrequests::Cols::_to_user = "to_user";
const std::string Friendrequests::primaryKeyName = "id";
const bool Friendrequests::hasPrimaryKey = true;
const std::string Friendrequests::tableName = "friendrequests";

const std::vector<typename Friendrequests::MetaData> Friendrequests::metaData_={
{"id","uint64_t","bigint unsigned",8,1,1,1},
{"from_user","uint64_t","bigint unsigned",8,0,0,1},
{"to_user","uint64_t","bigint unsigned",8,0,0,1}
};
const std::string &Friendrequests::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Friendrequests::Friendrequests(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["from_user"].isNull())
        {
            fromUser_=std::make_shared<uint64_t>(r["from_user"].as<uint64_t>());
        }
        if(!r["to_user"].isNull())
        {
            toUser_=std::make_shared<uint64_t>(r["to_user"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            fromUser_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            toUser_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Friendrequests::Friendrequests(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fromUser_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            toUser_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
}

Friendrequests::Friendrequests(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("from_user"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["from_user"].isNull())
        {
            fromUser_=std::make_shared<uint64_t>((uint64_t)pJson["from_user"].asUInt64());
        }
    }
    if(pJson.isMember("to_user"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["to_user"].isNull())
        {
            toUser_=std::make_shared<uint64_t>((uint64_t)pJson["to_user"].asUInt64());
        }
    }
}

void Friendrequests::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fromUser_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            toUser_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
}

void Friendrequests::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("from_user"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["from_user"].isNull())
        {
            fromUser_=std::make_shared<uint64_t>((uint64_t)pJson["from_user"].asUInt64());
        }
    }
    if(pJson.isMember("to_user"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["to_user"].isNull())
        {
            toUser_=std::make_shared<uint64_t>((uint64_t)pJson["to_user"].asUInt64());
        }
    }
}

const uint64_t &Friendrequests::getValueOfId() const noexcept
{
    static const uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Friendrequests::getId() const noexcept
{
    return id_;
}
void Friendrequests::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Friendrequests::PrimaryKeyType & Friendrequests::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &Friendrequests::getValueOfFromUser() const noexcept
{
    static const uint64_t defaultValue = uint64_t();
    if(fromUser_)
        return *fromUser_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Friendrequests::getFromUser() const noexcept
{
    return fromUser_;
}
void Friendrequests::setFromUser(const uint64_t &pFromUser) noexcept
{
    fromUser_ = std::make_shared<uint64_t>(pFromUser);
    dirtyFlag_[1] = true;
}

const uint64_t &Friendrequests::getValueOfToUser() const noexcept
{
    static const uint64_t defaultValue = uint64_t();
    if(toUser_)
        return *toUser_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Friendrequests::getToUser() const noexcept
{
    return toUser_;
}
void Friendrequests::setToUser(const uint64_t &pToUser) noexcept
{
    toUser_ = std::make_shared<uint64_t>(pToUser);
    dirtyFlag_[2] = true;
}

void Friendrequests::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Friendrequests::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "from_user",
        "to_user"
    };
    return inCols;
}

void Friendrequests::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFromUser())
        {
            binder << getValueOfFromUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getToUser())
        {
            binder << getValueOfToUser();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Friendrequests::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Friendrequests::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFromUser())
        {
            binder << getValueOfFromUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getToUser())
        {
            binder << getValueOfToUser();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Friendrequests::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFromUser())
    {
        ret["from_user"]=(Json::UInt64)getValueOfFromUser();
    }
    else
    {
        ret["from_user"]=Json::Value();
    }
    if(getToUser())
    {
        ret["to_user"]=(Json::UInt64)getValueOfToUser();
    }
    else
    {
        ret["to_user"]=Json::Value();
    }
    return ret;
}

Json::Value Friendrequests::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFromUser())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfFromUser();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getToUser())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfToUser();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFromUser())
    {
        ret["from_user"]=(Json::UInt64)getValueOfFromUser();
    }
    else
    {
        ret["from_user"]=Json::Value();
    }
    if(getToUser())
    {
        ret["to_user"]=(Json::UInt64)getValueOfToUser();
    }
    else
    {
        ret["to_user"]=Json::Value();
    }
    return ret;
}

bool Friendrequests::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("from_user"))
    {
        if(!validJsonOfField(1, "from_user", pJson["from_user"], err, true))
            return false;
    }
    else
    {
        err="The from_user column cannot be null";
        return false;
    }
    if(pJson.isMember("to_user"))
    {
        if(!validJsonOfField(2, "to_user", pJson["to_user"], err, true))
            return false;
    }
    else
    {
        err="The to_user column cannot be null";
        return false;
    }
    return true;
}
bool Friendrequests::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Friendrequests::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("from_user"))
    {
        if(!validJsonOfField(1, "from_user", pJson["from_user"], err, false))
            return false;
    }
    if(pJson.isMember("to_user"))
    {
        if(!validJsonOfField(2, "to_user", pJson["to_user"], err, false))
            return false;
    }
    return true;
}
bool Friendrequests::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Friendrequests::validJsonOfField(size_t index,
                                      const std::string &fieldName,
                                      const Json::Value &pJson,
                                      std::string &err,
                                      bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
