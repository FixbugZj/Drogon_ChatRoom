/**
 *
 *  Role.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Role.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::koi;

const std::string Role::Cols::_id = "id";
const std::string Role::Cols::_name = "name";
const std::string Role::Cols::_code = "code";
const std::string Role::Cols::_api = "api";
const std::string Role::Cols::_roleRoutes = "roleRoutes";
const std::string Role::Cols::_firstPage = "firstPage";
const std::string Role::Cols::_desc = "desc";
const std::string Role::Cols::_createTime = "createTime";
const std::string Role::Cols::_updateTime = "updateTime";
const std::string Role::primaryKeyName = "id";
const bool Role::hasPrimaryKey = true;
const std::string Role::tableName = "role";

const std::vector<typename Role::MetaData> Role::metaData_={
{"id","uint64_t","bigint unsigned",8,1,1,1},
{"name","std::string","varchar(255)",255,0,0,1},
{"code","std::string","varchar(255)",255,0,0,1},
{"api","std::string","text",0,0,0,0},
{"roleRoutes","std::string","varchar(255)",255,0,0,0},
{"firstPage","std::string","varchar(255)",255,0,0,0},
{"desc","std::string","varchar(255)",255,0,0,0},
{"createTime","::trantor::Date","datetime",0,0,0,0},
{"updateTime","::trantor::Date","datetime",0,0,0,0}
};
const std::string &Role::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Role::Role(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["code"].isNull())
        {
            code_=std::make_shared<std::string>(r["code"].as<std::string>());
        }
        if(!r["api"].isNull())
        {
            api_=std::make_shared<std::string>(r["api"].as<std::string>());
        }
        if(!r["roleRoutes"].isNull())
        {
            roleroutes_=std::make_shared<std::string>(r["roleRoutes"].as<std::string>());
        }
        if(!r["firstPage"].isNull())
        {
            firstpage_=std::make_shared<std::string>(r["firstPage"].as<std::string>());
        }
        if(!r["desc"].isNull())
        {
            desc_=std::make_shared<std::string>(r["desc"].as<std::string>());
        }
        if(!r["createTime"].isNull())
        {
            auto timeStr = r["createTime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updateTime"].isNull())
        {
            auto timeStr = r["updateTime"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            code_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            api_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            roleroutes_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            firstpage_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            desc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Role::Role(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            code_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            api_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            roleroutes_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            firstpage_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            desc_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Role::Role(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("code"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["code"].isNull())
        {
            code_=std::make_shared<std::string>(pJson["code"].asString());
        }
    }
    if(pJson.isMember("api"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["api"].isNull())
        {
            api_=std::make_shared<std::string>(pJson["api"].asString());
        }
    }
    if(pJson.isMember("roleRoutes"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["roleRoutes"].isNull())
        {
            roleroutes_=std::make_shared<std::string>(pJson["roleRoutes"].asString());
        }
    }
    if(pJson.isMember("firstPage"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["firstPage"].isNull())
        {
            firstpage_=std::make_shared<std::string>(pJson["firstPage"].asString());
        }
    }
    if(pJson.isMember("desc"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["desc"].isNull())
        {
            desc_=std::make_shared<std::string>(pJson["desc"].asString());
        }
    }
    if(pJson.isMember("createTime"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["createTime"].isNull())
        {
            auto timeStr = pJson["createTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateTime"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["updateTime"].isNull())
        {
            auto timeStr = pJson["updateTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Role::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            code_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            api_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            roleroutes_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            firstpage_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            desc_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Role::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("code"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["code"].isNull())
        {
            code_=std::make_shared<std::string>(pJson["code"].asString());
        }
    }
    if(pJson.isMember("api"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["api"].isNull())
        {
            api_=std::make_shared<std::string>(pJson["api"].asString());
        }
    }
    if(pJson.isMember("roleRoutes"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["roleRoutes"].isNull())
        {
            roleroutes_=std::make_shared<std::string>(pJson["roleRoutes"].asString());
        }
    }
    if(pJson.isMember("firstPage"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["firstPage"].isNull())
        {
            firstpage_=std::make_shared<std::string>(pJson["firstPage"].asString());
        }
    }
    if(pJson.isMember("desc"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["desc"].isNull())
        {
            desc_=std::make_shared<std::string>(pJson["desc"].asString());
        }
    }
    if(pJson.isMember("createTime"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["createTime"].isNull())
        {
            auto timeStr = pJson["createTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createtime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updateTime"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["updateTime"].isNull())
        {
            auto timeStr = pJson["updateTime"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatetime_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const uint64_t &Role::getValueOfId() const noexcept
{
    static const uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Role::getId() const noexcept
{
    return id_;
}
void Role::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Role::PrimaryKeyType & Role::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Role::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Role::getName() const noexcept
{
    return name_;
}
void Role::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Role::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}

const std::string &Role::getValueOfCode() const noexcept
{
    static const std::string defaultValue = std::string();
    if(code_)
        return *code_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Role::getCode() const noexcept
{
    return code_;
}
void Role::setCode(const std::string &pCode) noexcept
{
    code_ = std::make_shared<std::string>(pCode);
    dirtyFlag_[2] = true;
}
void Role::setCode(std::string &&pCode) noexcept
{
    code_ = std::make_shared<std::string>(std::move(pCode));
    dirtyFlag_[2] = true;
}

const std::string &Role::getValueOfApi() const noexcept
{
    static const std::string defaultValue = std::string();
    if(api_)
        return *api_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Role::getApi() const noexcept
{
    return api_;
}
void Role::setApi(const std::string &pApi) noexcept
{
    api_ = std::make_shared<std::string>(pApi);
    dirtyFlag_[3] = true;
}
void Role::setApi(std::string &&pApi) noexcept
{
    api_ = std::make_shared<std::string>(std::move(pApi));
    dirtyFlag_[3] = true;
}
void Role::setApiToNull() noexcept
{
    api_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Role::getValueOfRoleroutes() const noexcept
{
    static const std::string defaultValue = std::string();
    if(roleroutes_)
        return *roleroutes_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Role::getRoleroutes() const noexcept
{
    return roleroutes_;
}
void Role::setRoleroutes(const std::string &pRoleroutes) noexcept
{
    roleroutes_ = std::make_shared<std::string>(pRoleroutes);
    dirtyFlag_[4] = true;
}
void Role::setRoleroutes(std::string &&pRoleroutes) noexcept
{
    roleroutes_ = std::make_shared<std::string>(std::move(pRoleroutes));
    dirtyFlag_[4] = true;
}
void Role::setRoleroutesToNull() noexcept
{
    roleroutes_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Role::getValueOfFirstpage() const noexcept
{
    static const std::string defaultValue = std::string();
    if(firstpage_)
        return *firstpage_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Role::getFirstpage() const noexcept
{
    return firstpage_;
}
void Role::setFirstpage(const std::string &pFirstpage) noexcept
{
    firstpage_ = std::make_shared<std::string>(pFirstpage);
    dirtyFlag_[5] = true;
}
void Role::setFirstpage(std::string &&pFirstpage) noexcept
{
    firstpage_ = std::make_shared<std::string>(std::move(pFirstpage));
    dirtyFlag_[5] = true;
}
void Role::setFirstpageToNull() noexcept
{
    firstpage_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Role::getValueOfDesc() const noexcept
{
    static const std::string defaultValue = std::string();
    if(desc_)
        return *desc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Role::getDesc() const noexcept
{
    return desc_;
}
void Role::setDesc(const std::string &pDesc) noexcept
{
    desc_ = std::make_shared<std::string>(pDesc);
    dirtyFlag_[6] = true;
}
void Role::setDesc(std::string &&pDesc) noexcept
{
    desc_ = std::make_shared<std::string>(std::move(pDesc));
    dirtyFlag_[6] = true;
}
void Role::setDescToNull() noexcept
{
    desc_.reset();
    dirtyFlag_[6] = true;
}

const ::trantor::Date &Role::getValueOfCreatetime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createtime_)
        return *createtime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Role::getCreatetime() const noexcept
{
    return createtime_;
}
void Role::setCreatetime(const ::trantor::Date &pCreatetime) noexcept
{
    createtime_ = std::make_shared<::trantor::Date>(pCreatetime);
    dirtyFlag_[7] = true;
}
void Role::setCreatetimeToNull() noexcept
{
    createtime_.reset();
    dirtyFlag_[7] = true;
}

const ::trantor::Date &Role::getValueOfUpdatetime() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatetime_)
        return *updatetime_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Role::getUpdatetime() const noexcept
{
    return updatetime_;
}
void Role::setUpdatetime(const ::trantor::Date &pUpdatetime) noexcept
{
    updatetime_ = std::make_shared<::trantor::Date>(pUpdatetime);
    dirtyFlag_[8] = true;
}
void Role::setUpdatetimeToNull() noexcept
{
    updatetime_.reset();
    dirtyFlag_[8] = true;
}

void Role::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Role::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "code",
        "api",
        "roleRoutes",
        "firstPage",
        "desc",
        "createTime",
        "updateTime"
    };
    return inCols;
}

void Role::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCode())
        {
            binder << getValueOfCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getApi())
        {
            binder << getValueOfApi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRoleroutes())
        {
            binder << getValueOfRoleroutes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFirstpage())
        {
            binder << getValueOfFirstpage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDesc())
        {
            binder << getValueOfDesc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreatetime())
        {
            binder << getValueOfCreatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdatetime())
        {
            binder << getValueOfUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Role::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Role::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCode())
        {
            binder << getValueOfCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getApi())
        {
            binder << getValueOfApi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getRoleroutes())
        {
            binder << getValueOfRoleroutes();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFirstpage())
        {
            binder << getValueOfFirstpage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getDesc())
        {
            binder << getValueOfDesc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreatetime())
        {
            binder << getValueOfCreatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdatetime())
        {
            binder << getValueOfUpdatetime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Role::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getCode())
    {
        ret["code"]=getValueOfCode();
    }
    else
    {
        ret["code"]=Json::Value();
    }
    if(getApi())
    {
        ret["api"]=getValueOfApi();
    }
    else
    {
        ret["api"]=Json::Value();
    }
    if(getRoleroutes())
    {
        ret["roleRoutes"]=getValueOfRoleroutes();
    }
    else
    {
        ret["roleRoutes"]=Json::Value();
    }
    if(getFirstpage())
    {
        ret["firstPage"]=getValueOfFirstpage();
    }
    else
    {
        ret["firstPage"]=Json::Value();
    }
    if(getDesc())
    {
        ret["desc"]=getValueOfDesc();
    }
    else
    {
        ret["desc"]=Json::Value();
    }
    if(getCreatetime())
    {
        ret["createTime"]=getCreatetime()->toDbStringLocal();
    }
    else
    {
        ret["createTime"]=Json::Value();
    }
    if(getUpdatetime())
    {
        ret["updateTime"]=getUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["updateTime"]=Json::Value();
    }
    return ret;
}

Json::Value Role::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCode())
            {
                ret[pMasqueradingVector[2]]=getValueOfCode();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getApi())
            {
                ret[pMasqueradingVector[3]]=getValueOfApi();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getRoleroutes())
            {
                ret[pMasqueradingVector[4]]=getValueOfRoleroutes();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getFirstpage())
            {
                ret[pMasqueradingVector[5]]=getValueOfFirstpage();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getDesc())
            {
                ret[pMasqueradingVector[6]]=getValueOfDesc();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCreatetime())
            {
                ret[pMasqueradingVector[7]]=getCreatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUpdatetime())
            {
                ret[pMasqueradingVector[8]]=getUpdatetime()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getCode())
    {
        ret["code"]=getValueOfCode();
    }
    else
    {
        ret["code"]=Json::Value();
    }
    if(getApi())
    {
        ret["api"]=getValueOfApi();
    }
    else
    {
        ret["api"]=Json::Value();
    }
    if(getRoleroutes())
    {
        ret["roleRoutes"]=getValueOfRoleroutes();
    }
    else
    {
        ret["roleRoutes"]=Json::Value();
    }
    if(getFirstpage())
    {
        ret["firstPage"]=getValueOfFirstpage();
    }
    else
    {
        ret["firstPage"]=Json::Value();
    }
    if(getDesc())
    {
        ret["desc"]=getValueOfDesc();
    }
    else
    {
        ret["desc"]=Json::Value();
    }
    if(getCreatetime())
    {
        ret["createTime"]=getCreatetime()->toDbStringLocal();
    }
    else
    {
        ret["createTime"]=Json::Value();
    }
    if(getUpdatetime())
    {
        ret["updateTime"]=getUpdatetime()->toDbStringLocal();
    }
    else
    {
        ret["updateTime"]=Json::Value();
    }
    return ret;
}

bool Role::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("code"))
    {
        if(!validJsonOfField(2, "code", pJson["code"], err, true))
            return false;
    }
    else
    {
        err="The code column cannot be null";
        return false;
    }
    if(pJson.isMember("api"))
    {
        if(!validJsonOfField(3, "api", pJson["api"], err, true))
            return false;
    }
    if(pJson.isMember("roleRoutes"))
    {
        if(!validJsonOfField(4, "roleRoutes", pJson["roleRoutes"], err, true))
            return false;
    }
    if(pJson.isMember("firstPage"))
    {
        if(!validJsonOfField(5, "firstPage", pJson["firstPage"], err, true))
            return false;
    }
    if(pJson.isMember("desc"))
    {
        if(!validJsonOfField(6, "desc", pJson["desc"], err, true))
            return false;
    }
    if(pJson.isMember("createTime"))
    {
        if(!validJsonOfField(7, "createTime", pJson["createTime"], err, true))
            return false;
    }
    if(pJson.isMember("updateTime"))
    {
        if(!validJsonOfField(8, "updateTime", pJson["updateTime"], err, true))
            return false;
    }
    return true;
}
bool Role::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Role::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("code"))
    {
        if(!validJsonOfField(2, "code", pJson["code"], err, false))
            return false;
    }
    if(pJson.isMember("api"))
    {
        if(!validJsonOfField(3, "api", pJson["api"], err, false))
            return false;
    }
    if(pJson.isMember("roleRoutes"))
    {
        if(!validJsonOfField(4, "roleRoutes", pJson["roleRoutes"], err, false))
            return false;
    }
    if(pJson.isMember("firstPage"))
    {
        if(!validJsonOfField(5, "firstPage", pJson["firstPage"], err, false))
            return false;
    }
    if(pJson.isMember("desc"))
    {
        if(!validJsonOfField(6, "desc", pJson["desc"], err, false))
            return false;
    }
    if(pJson.isMember("createTime"))
    {
        if(!validJsonOfField(7, "createTime", pJson["createTime"], err, false))
            return false;
    }
    if(pJson.isMember("updateTime"))
    {
        if(!validJsonOfField(8, "updateTime", pJson["updateTime"], err, false))
            return false;
    }
    return true;
}
bool Role::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Role::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
