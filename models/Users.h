/**
 *
 *  Users.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace koi
{

class Users
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _nickname;
        static const std::string _account;
        static const std::string _password;
        static const std::string _avatarUrl;
        static const std::string _isValid;
        static const std::string _sex;
        static const std::string _phone;
        static const std::string _salt;
        static const std::string _roleId;
        static const std::string _createTime;
        static const std::string _updateTime;
    };

    static const int primaryKeyNumber;
    static const std::string tableName;
    static const bool hasPrimaryKey;
    static const std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Users(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Users(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Users(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Users() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;

    /**  For column nickname  */
    ///Get the value of the column nickname, returns the default value if the column is null
    const std::string &getValueOfNickname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNickname() const noexcept;
    ///Set the value of the column nickname
    void setNickname(const std::string &pNickname) noexcept;
    void setNickname(std::string &&pNickname) noexcept;

    /**  For column account  */
    ///Get the value of the column account, returns the default value if the column is null
    const std::string &getValueOfAccount() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAccount() const noexcept;
    ///Set the value of the column account
    void setAccount(const std::string &pAccount) noexcept;
    void setAccount(std::string &&pAccount) noexcept;

    /**  For column password  */
    ///Get the value of the column password, returns the default value if the column is null
    const std::string &getValueOfPassword() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPassword() const noexcept;
    ///Set the value of the column password
    void setPassword(const std::string &pPassword) noexcept;
    void setPassword(std::string &&pPassword) noexcept;

    /**  For column avatarUrl  */
    ///Get the value of the column avatarUrl, returns the default value if the column is null
    const std::string &getValueOfAvatarurl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAvatarurl() const noexcept;
    ///Set the value of the column avatarUrl
    void setAvatarurl(const std::string &pAvatarurl) noexcept;
    void setAvatarurl(std::string &&pAvatarurl) noexcept;

    /**  For column isValid  */
    ///Get the value of the column isValid, returns the default value if the column is null
    const int8_t &getValueOfIsvalid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsvalid() const noexcept;
    ///Set the value of the column isValid
    void setIsvalid(const int8_t &pIsvalid) noexcept;

    /**  For column sex  */
    ///Get the value of the column sex, returns the default value if the column is null
    const std::string &getValueOfSex() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSex() const noexcept;
    ///Set the value of the column sex
    void setSex(const std::string &pSex) noexcept;
    void setSex(std::string &&pSex) noexcept;

    /**  For column phone  */
    ///Get the value of the column phone, returns the default value if the column is null
    const std::string &getValueOfPhone() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPhone() const noexcept;
    ///Set the value of the column phone
    void setPhone(const std::string &pPhone) noexcept;
    void setPhone(std::string &&pPhone) noexcept;

    /**  For column salt  */
    ///Get the value of the column salt, returns the default value if the column is null
    const std::string &getValueOfSalt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSalt() const noexcept;
    ///Set the value of the column salt
    void setSalt(const std::string &pSalt) noexcept;
    void setSalt(std::string &&pSalt) noexcept;

    /**  For column roleId  */
    ///Get the value of the column roleId, returns the default value if the column is null
    const std::string &getValueOfRoleid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRoleid() const noexcept;
    ///Set the value of the column roleId
    void setRoleid(const std::string &pRoleid) noexcept;
    void setRoleid(std::string &&pRoleid) noexcept;
    void setRoleidToNull() noexcept;

    /**  For column createTime  */
    ///Get the value of the column createTime, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatetime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatetime() const noexcept;
    ///Set the value of the column createTime
    void setCreatetime(const ::trantor::Date &pCreatetime) noexcept;
    void setCreatetimeToNull() noexcept;

    /**  For column updateTime  */
    ///Get the value of the column updateTime, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatetime() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatetime() const noexcept;
    ///Set the value of the column updateTime
    void setUpdatetime(const ::trantor::Date &pUpdatetime) noexcept;
    void setUpdatetimeToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Users>;
    friend drogon::orm::BaseBuilder<Users, true, true>;
    friend drogon::orm::BaseBuilder<Users, true, false>;
    friend drogon::orm::BaseBuilder<Users, false, true>;
    friend drogon::orm::BaseBuilder<Users, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Users>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<std::string> nickname_;
    std::shared_ptr<std::string> account_;
    std::shared_ptr<std::string> password_;
    std::shared_ptr<std::string> avatarurl_;
    std::shared_ptr<int8_t> isvalid_;
    std::shared_ptr<std::string> sex_;
    std::shared_ptr<std::string> phone_;
    std::shared_ptr<std::string> salt_;
    std::shared_ptr<std::string> roleid_;
    std::shared_ptr<::trantor::Date> createtime_;
    std::shared_ptr<::trantor::Date> updatetime_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "nickname,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "account,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "password,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "avatarUrl,";
            ++parametersCount;
        }
        sql += "isValid,";
        ++parametersCount;
        if(!dirtyFlag_[5])
        {
            needSelection=true;
        }
        if(dirtyFlag_[6])
        {
            sql += "sex,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "phone,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "salt,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "roleId,";
            ++parametersCount;
        }
        sql += "createTime,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        sql += "updateTime,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace koi
} // namespace drogon_model
